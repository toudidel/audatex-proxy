package com.audatex.b2b.serviceinterface_v1;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;

/**
 * The TaskService contains Task related operations. A Task is associated with a case in AudaNet and
 *     contains the complete case data. The TaskService allows to insert and retrieve task data in the AudaNet server
 *     
 *
 * This class was generated by Apache CXF 3.1.9
 * 2017-01-05T21:07:30.471+01:00
 * Generated source version: 3.1.9
 * 
 */
@WebService(targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", name = "TaskServicePort")
@XmlSeeAlso({ObjectFactory.class})
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
public interface TaskServicePort {

    /**
     * Retrieves the task specified by the taskId parameter and attempts to close it using the current member permissions
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to close. Required parameter
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "closeTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "closeTaskResponse")
    public B2BResponse closeTask(
        @WebParam(partName = "closeTaskRequest", name = "closeTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest closeTaskRequest
    );

    /**
     * This operation merges a sender's task in the 'Copied' state into the sender's worklist.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to merge. Required parameter
     *       * Parameter "copyOnMerge ": optional boolean parameter - indicates if the merge should create a copy or only update the existing task
     *       
     *       * Parameter "comment ": 
     *       	a short text describing the reason for the merge.
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "mergeTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "mergeTaskResponse")
    public B2BResponse mergeTask(
        @WebParam(partName = "mergeTaskRequest", name = "mergeTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest mergeTaskRequest
    );

    /**
     * Does nothing else than returning a fixed response. This can be used to test the connection to and the
     *       SOAP request handling of the AudaNet server. No user credentials need to be specified for this operation
     *        
     */
    @WebMethod
    @WebResult(name = "pingResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "pingResponse")
    public B2BResponse ping(
        @WebParam(partName = "pingRequest", name = "pingRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest pingRequest
    );

    /**
     * Returns a TaskProxyList with the tasks that the current user is allowed to see and match the filter
     *       criteria specified as parameters.
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "fieldsToReturn ": Comma separated list of child element names of the TaskProxy SAXIF type. The returned task list will
     *         contain these fields, if they are set.
     *       * Parameter "view ": Specifies the view from which the task list is retrieved. Possible values:
     *         [open|sent|closed|deleted|copied|stopped|historical_records|all]. Default: open.
     *       * Parameter "onlyMarkedTasks ": Filters the result list by returning only marked tasks. Tasks can be marked from within CaseManager
     *         or with the 'markForDownload' parameter in the createTask or updateTask operations.
     *       * Parameter "maxCount ": Restricts the size of the returning list to the specified value.
     *       * Parameter "startAtIndex ": Pagination feature, in combination with maxCount parameter. Allows to retrieve the "next" block of
     *         items. The value is 1-based (first item has index 1).
     *       * Parameter "filter: ": 'filter:' keyword followed by the field to filter on. The value of the parameter is the actual
     *       	filter value. Additionally, for date type variables it can be extended to 'filter:param:from' and 'filter:param:to'
     *       	where 'param' is a date type parameter name
     *       	Examples: 'filter:TaskId', value: '111'; 'filter:CreationDate:from', value: '2012-01-01';
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.
     *       * Parameter "sortBy ": Specifies the field to sort the results by. The default sorting direction is descending.
     *       If not specified, 'CreationDate' will be used
     *       * Parameter "sortDirection ": Specifies the sorting direction. Possible values: 'ASC', 'DESC'.
     *       If 'sortBy' parameter is not specified, 'CreationDate' will be used as its value
     *       * Parameter "repairerCommunityId ": This parameter takes either the member id of the community or the keyword NONE.
     *       If a community Id is present, only the tasks where the repairer belongs to that community will be returned.
     *       If NONE is specified, only the tasks where the repairer do not belong to either community will be returned.
     *       The communities have to be defined on the organization or the root organization of the requesting member.   
     */
    @WebMethod
    @WebResult(name = "findTasksResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "findTasksResponse")
    public B2BResponse findTasks(
        @WebParam(partName = "findTasksRequest", name = "findTasksRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest findTasksRequest
    );

    /**
     * This operation transfers a task to the user specified in transferTo or the sender if it is omitted.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to reassign. Required parameter
     *       * Parameter "transferTo ": The member to whom the task should be transferred to.
     *       	Optional parameter; if not specified, the task is transferred to the calling member.
     *       	Format IDENTIFIER_TYPE:IDENTIFIER.
     *       	The IDENTIFIER_TYPE is a classifier string which can have one of the following values: MemberId|Login|CustomerId|CommId.
     *       	The IDENTIFIER is actual identifier value which corresponds to the IDENTIFIER_TYPE provided.
     *       
     *       * Parameter "comment ": 
     *       	a short text describing the reason for the transfer. This is the message sent to the new owner of the task,
     *       	if the transfer results in a send action. This comment is also written to the transfer event.
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "transferTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "transferTaskResponse")
    public B2BResponse transferTask(
        @WebParam(partName = "transferTaskRequest", name = "transferTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest transferTaskRequest
    );

    /**
     * Updates an existing task with the data in the payload. The task to update is identified by the
     *       ItemId
     *       ("TaskId") and the CaseId in the payload task.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "requestStylesheet ": Name of the XSLT stylesheet that should be applied to the payload to transform it to SAXIF.
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.
     *       * Parameter "markForDownload ": Specifies if the task should be marked in the CaseManager after the upload. Allowed values: true,
     *         false. Default: false.
     *       * Parameter "checkMandatoryFieldsAtUpload ": Specifies if mandatory fields should be checked. Operation fails if at least one of the fields
     *         defined as mandatory for an upload are not specified. Allowed values: true, false. Default: false.
     *       * Parameter "sendTo ": After updating, sends the task to a partner. The parameter value contains an Id type prefix, followed by a
     *         colon and the actual Id of the receiver. The type of the Id can be one of: MemberId, LoginId, CustomerId, CommId,
     *         ExternalOrganisationId. Examples: 'LoginId:de_repairer', 'CommId:DE123456'
     *       
     *       * Parameter "sendComment ": Comment to be sent along with the task to the receiver. This parameter is only relevant in combination with
     *         'sendTo' parameter and is ignored if 'sendTo' is not set.
     *       * Parameter "queueIfSystemDown ": Queue the operation if the system is down. The operation will be executed once the system is up.
     *         The acknowledge indicates if the operation has been executed immediately or queued.
     *         Allowed values: true, false. Default: false.
     *       * Parameter "unlockBeforeUpdate ": Unlock the task before updating. Requires the UNLOCK data access right BRE rule to be set. If the task is not locked,
     *       an error is returned. The Unlock event is also written.
     *       * Parameter "identifyVehicle ": Possible values: true, false, force.
     *       If set to true, vehicle identification will be executed for the task being created and vehicle data will be added to the task and
     *       persisted. Vehicle identification will not be executed if vehicle data already present in the created task.
     *       If set to false, vehicle identification will not be executed.
     *       If set to force, vehicle identification will always be executed for the task being created and vehicle data will be added
     *       to the task and persisted, regardless if vehicle data is already present in the created task.
     *       * Parameter "fillParticipant: ": This is a parametrized parameter and may be specified more than once.
     *        The parameter key should follow the pattern ‘fillParticipant:CaseMemberRole’
     *        and the value should follow the pattern ‘IdType:id’ (similar to 'sendTo' parameter), where:
     *        1. MemberRole should be an enumeration item from CaseMemberRoleType
     *        2. IdType should be the type of member identification, i.e. LoginId, MemberId etc., similar to ‘sendTo’ parameter for example
     *        3. Id should be the actual user id based on the IdType
     *        Examples:
     *        Key: 'fillParticipant:Bodyshop', value: 'ExternalOrganisationId:12345'
     *        Key: 'fillParticipant:Insurer', value: 'LoginId:de_insurer'
     *       
     *       * Parameter "selectPartnershipById ": This parameter is used to identify the partnership that will be used to fill all
     *        the partnership-related information in the task provided an appropriate transformation is configured.
     *        The value should follow the pattern ‘IdType:id’ (similar to 'sendTo' parameter), where:
     *        1. IdType should be the type of partnership identification, currently
     *           one of: PartnershipId, DebtorNr, CreditorNr, VehicleType
     *        2. Id should be the actual partnership id based on the IdType
     *        Examples:
     *        Key: 'selectPartnershipById', value: 'CreditorNr:12345'
     *       
     *       * Parameter "updateAttachmentMetadata ": When set to true, the service will merge the uploaded exisiting attachments using their
     *       ItemId. The attachment content will not be updated however. The only fields that are updated by this operation are:
     *       Category, Language, Status, AttachmentProperty, AttachmentContent, Annotation, GuideNumber
     *       * Parameter "sendTaskToDms ": This parameter is used to trigger an additional request to a dealer management system during a task update operation.
     *       The value of this parameter defines the destination dealer management system. Allowed values: VW. Default: -/-.
     *       Note that there are a few preconditions, to send a task to a dealer management system. For example: to send a task to a Volkswagen DMS,
     *       the foreignCaseId must be set.
     *       
     *       * Parameter "retrieveTaskFromDms ": This parameter is used to trigger an additional request to a dealer management system during a task update operation.
     *       The value of this parameter defines the destination dealer management system. Allowed values are: VW. Default: -/-.
     *       Note that there are a few preconditions, to retrieve a task from a dealer management system. For example: to retrieve a task from a Volkswagen DMS,
     *       the foreignCaseId must be defined.
     *       
     *       * Parameter "sendOnlyLastCalculation ": This parameter might be used in combination with the sendTo parameter to send only the last
     *         calculation with result. Allowed values: true, false. Default: false.
     *          
     */
    @WebMethod
    @WebResult(name = "updateTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "updateTaskResponse")
    public B2BResponse updateTask(
        @WebParam(partName = "updateTaskRequest", name = "updateTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest updateTaskRequest
    );

    /**
     * Retrieves the task specified by the taskId parameter and attempts to reassign it to the specified member (parameter 'assignTo')
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to reassign. Required parameter
     *       * Parameter "assignTo ": Specified the task receiver id in the format IDENTIFIER_TYPE:IDENTIFIER.
     *       The IDENTIFIER_TYPE is a classifier string which can have one of the following values: MemberId|Login|CustomerId|CommId.
     *       The IDENTIFIER is actual identifier value which corresponds to the IDENTIFIER_TYPE provided. Required parameter
     *       * Parameter "unlock ": If set to true then service unlocks the task(if it is locked) before reassigning. Default value is false. Optional parameter
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "reassignTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "reassignTaskResponse")
    public B2BResponse reassignTask(
        @WebParam(partName = "reassignTaskRequest", name = "reassignTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest reassignTaskRequest
    );

    /**
     * This operation sends the current user's task identified by taskId to the member identified by sendTo.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to send. Required parameter
     *       * Parameter "sendTo ": 
     *         The member receiving the task. The parameter value contains an Id type prefix, followed
     *         by a colon and the actual Id of the receiver. The type of the Id can be one of: MemberId, LoginId, CustomerId,
     *         CommId,ExternalOrganisationId.
     *         Examples: 'LoginId:de_repairer', 'CommId:DE123456'
     *       
     *       * Parameter "sendComment ": 
     *         Optional parameter. A short text describing the reason for the send.
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.
     *       * Parameter "sendOnlyLastCalculation ": This parameter might be used in combination with the sendTo parameter to send only the last
     *         calculation with result. Allowed values: true, false. Default: false.
     *          
     */
    @WebMethod
    @WebResult(name = "sendTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "sendTaskResponse")
    public B2BResponse sendTask(
        @WebParam(partName = "sendTaskRequest", name = "sendTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest sendTaskRequest
    );

    /**
     * Retrieves the case specified by the caseId parameter and attempts to reopen it using the current member permissions
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "caseId ": Specified the Id of the case to reopen. Required parameter
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "reopenCaseResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "reopenCaseResponse")
    public B2BResponse reopenCase(
        @WebParam(partName = "reopenCaseRequest", name = "reopenCaseRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest reopenCaseRequest
    );

    /**
     * A generic operation to executes an action. The action is specified as parameter. All operations in this
     *       service can also be invoked here, by specifying their operation name as action parameter (e.g.
     *       action="getTaskList").
     *       This serves two purposes: 1) new actions and customer specific actions can be added to this
     *       service without interface change. 2) a generic way to invoke operations.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *          
     */
    @WebMethod
    @WebResult(name = "executeActionResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "executeActionResponse")
    public B2BResponse executeAction(
        @WebParam(partName = "executeActionRequest", name = "executeActionRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest executeActionRequest
    );

    /**
     * Retrieves the task specified by the taskId parameter. The task is returned as XML in the payload.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to download. Required parameter
     *       * Parameter "responseStylesheet ": Name of the XSLT stylesheet that should be applied to the returned payload to transform it to the
     *         customer specific format.
     *       * Parameter "nocalculation ": Specifies if calculations should be excluded from the returned task. Allowed values: true, false.
     *         Default: false
     *       * Parameter "onlySelectedCalcs ": Specifies if the calculation list in the returned task should only contain
     *         selected calculations or
     *         all calculations. A calculation is selected if it has the field Checked = Yes.
     *         Allowed values: true, false. Default: false
     *       * Parameter "lastCalculationOnly ": Specifies if only the latest calculation with result in calculation list should be included in the
     *         returned task. This parameter can be used with parameter onlySelectedCalcs. In this case only the latest
     *         selected calculation is returned. Calculations are sorted by ClassResult.CalculationDateTime (when
     *         ClassResult.CalculationDateTime is null use ClassResult.CaptureDateTime).
     *         Allowed values: true, false. Default:
     *         false
     *       * Parameter "lastCheckedCalculationOnly ": It returns the last calculation accordingly to the rules defined in parameter lastCalculationOnly but
     *         only for checked calculations. If there are none non-checked calculations the behaviour of this parameter is the
     *         same as lastCalculationOnly (all calculations are considered).
     *         Allowed values: true, false. Default: false
     *       * Parameter "calculationInProgressOnly ": When set to true, will return the task with only the calculation in progress, 
     * 			i.e. calculation that has InProgress tag set to true, or otherwise, if such calculation
     * 			is not present, will return the last available calculation.
     * 		
     *       * Parameter "withCarValuations ": Specifies if the CarValuations element, if present, should be included in the returned task. Allowed
     *         values: true, false. Default: false
     *       * Parameter "withPerformanceRatings ": Specifies if the PerformanceRatingList element, if present, should be included in the returned task.
     *         Allowed values: true, false. Default: false
     *       * Parameter "withVehicleHealthCheck ": Specifies if the Vehicle Health Check Scan data will be appended to the task. Default: false
     *       * Parameter "removeMark ": If true, the mark in the CaseManager on this task is removed when downloading. Allowed values: true,
     *         false. Default: false
     *       * Parameter "noAttachmentContents ": By default, the attachments in the returned task include their content (base64 encoded). If this
     *         parameter is true, only the attachment metadata (ItemId, FileName etc.) is returned in the task. Their contents
     *         can be retrieved in a separate call to the AttachmentService. This considerably reduces the response size.
     *         Allowed values: true, false. Default: false
     *       * Parameter "callingApplication ": A GeneratorType assigned to the requesting client. The parameter is mandatory if corresponding
     *       	service parameter specified and must be provided with each getTask operation invocation. The parameter is
     *       	optional if it is not enforced by the corresponding service parameter.
     *       * Parameter "newAttachmentsOnly ": Only return attachments that have been added to the task since the last time the user has
     *       	downloaded the task.
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.
     *       * Parameter "suppressWritingDownloadEvent ": If set to true, the getTask operation does not write the TaskDownloaded event to the task.
     *       * Parameter "withComplianceCheckResult ": If set to true, the getTask operation will return the compliance rules check result associated with the task.
     *       * Parameter "withRepairWatchId ": When set to true, the getTask operation will return the ID of RepairWatch data for the case, if there is existing one.   
     */
    @WebMethod
    @WebResult(name = "getTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "getTaskResponse")
    public B2BResponse getTask(
        @WebParam(partName = "getTaskRequest", name = "getTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest getTaskRequest
    );

    /**
     * Retrieves the case specified by the casekId parameter and attempts to close it using the current member permissions
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "caseId ": Specified the Id of the case to close. Required parameter
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "closeCaseResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "closeCaseResponse")
    public B2BResponse closeCase(
        @WebParam(partName = "closeCaseRequest", name = "closeCaseRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest closeCaseRequest
    );

    /**
     * Creates a new task in a new or existing case on the AudaNet platform. The payload contains the task
     *       XML.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "requestStylesheet ": Name of the XSLT stylesheet that should be applied to the payload to transform it to SAXIF.
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.
     *       * Parameter "markForDownload ": Specifies if the task should be marked in the CaseManager after the upload. Allowed values: true,
     *         false. Default: false.
     *       * Parameter "checkMandatoryFieldsAtUpload ": Specifies if mandatory fields should be checked. Operation fails if at least one of the fields
     *         defined as mandatory for an upload are not specified. Allowed values: true, false. Default: false.
     *       * Parameter "sendTo ": After creating, sends the task to a partner. The parameter value contains an Id type prefix, followed
     *         by a colon and the actual Id of the receiver. The type of the Id can be one of: MemberId, LoginId, CustomerId,
     *         CommId,ExternalOrganisationId.
     *         Examples: 'LoginId:de_repairer', 'CommId:DE123456'
     *       
     *       * Parameter "sendComment ": Comment to be sent along with the task to the receiver. This parameter is only relevant in combination with
     *         'sendTo' parameter and is ignored if 'sendTo' is not set.
     *       * Parameter "clientSpecifiedIDs ": Specifies if the task in the payload specifies the taskId and caseId. This is only supported for
     *         a limited set of applications. Allowed values: true, false. Default: false.
     *       * Parameter "queueIfSystemDown ": Queue the operation if the system is down. The operation will be executed once the system is up.
     *         The acknowledge indicates if the operation has been executed immediately or queued.
     *         Allowed values: true, false. Default: false.
     *       * Parameter "resolveInsuranceCompanyById ": Identifier of an insurance organization. Value contains type prefix (can be MemberId, LoginId, CustomerId, CommId)
     *       	and the corresponding identifier value, separated by colon (Ex. CommId:123456). If the parameter is provided then insurance
     *       	company data in task (Task/BasicClaimData/PolicyData/InsuranceCompany) will be replaced with the specified insurance
     *       	company data.
     *       * Parameter "identifyVehicle ": Possible values: true, false, force.
     *       If set to true, vehicle identification will be executed for the task being created and vehicle data will be added to the task and
     *       persisted. Vehicle identification will not be executed if vehicle data already present in the created task.
     *       If set to false, vehicle identification will not be executed.
     *       If set to force, vehicle identification will always be executed for the task being created and vehicle data will be added
     *       to the task and persisted, regardless if vehicle data is already present in the created task.
     *       * Parameter "fillParticipant: ": This is a parametrized parameter and may be specified more than once.
     *        The parameter key should follow the pattern ‘fillParticipant:CaseMemberRole’
     *        and the value should follow the pattern ‘IdType:id’ (similar to 'sendTo' parameter), where:
     *        1. MemberRole should be an enumeration item from CaseMemberRoleType
     *        2. IdType should be the type of member identification, i.e. LoginId, MemberId etc., similar to ‘sendTo’ parameter for example
     *        3. Id should be the actual user id based on the IdType
     *        Examples:
     *        Key: 'fillParticipant:Bodyshop', value: 'ExternalOrganisationId:12345'
     *        Key: 'fillParticipant:Insurer', value: 'LoginId:de_insurer'
     *       
     *       * Parameter "selectPartnershipById ": This parameter is used to identify the partnership that will be used to fill all
     *        the partnership-related information in the task provided an appropriate transformation is configured.
     *        The value should follow the pattern ‘IdType:id’ (similar to 'sendTo' parameter), where:
     *        1. IdType should be the type of partnership identification, currently
     *           one of: PartnershipId, DebtorNr, CreditorNr, VehicleType
     *        2. Id should be the actual partnership id based on the IdType
     *        Examples:
     *        Key: 'selectPartnershipById', value: 'CreditorNr:12345'
     *       
     *       * Parameter "sendTaskToDms ": This parameter is used to trigger an additional request to a dealer management system during a task create operation.
     *       The value of this parameter defines the destination dealer management system. Allowed values: VW. Default: -/-.
     *       Note that there are a few preconditions, to send a task to a dealer management system. For example: to send a task to a Volkswagen DMS,
     *       the foreignCaseId must be set.
     *       
     *       * Parameter "retrieveTaskFromDms ": This parameter is used to trigger an additional request to a dealer management system during a task create operation.
     *       The value of this parameter defines the destination dealer management system. Allowed values are: VW. Default: -/-.
     *       Note that there are a few preconditions, to retrieve a task from a dealer management system. For example: to retrieve a task from a Volkswagen DMS,
     *       the foreignCaseId must be defined.
     *       
     *       * Parameter "sendOnlyLastCalculation ": This parameter might be used in combination with the sendTo parameter to send only the last
     *         calculation with result. Allowed values: true, false. Default: false.
     *          
     */
    @WebMethod
    @WebResult(name = "createTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "createTaskResponse")
    public B2BResponse createTask(
        @WebParam(partName = "createTaskRequest", name = "createTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest createTaskRequest
    );

    /**
     * Returns a TaskProxyList with the tasks that the current user is allowed to see and match the filter
     *       criteria specified as parameters.
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "fieldsToReturn ": Comma separated list of child element names of the TaskProxy SAXIF type. The returned task list will
     *         contain these fields, if they are set.
     *       * Parameter "fromDate ": Format [yyyy-mm-ddT00:00:00]. Filters the result list by returning only tasks that are newer (based
     *         on creation date) than the provided date. The time part of this parameter is optional. For example, the value
     *         "2008-06-26" is valid and is extended to "2008-06-26T00:00:00".
     *       * Parameter "toDate ": Format [yyyy-mm-ddT00:00:00]. Filters the result list by returning only tasks that are older (based
     *         on creation date) than the provided date. The time part of this parameter is optional. For example, the value
     *         "2008-06-26" is valid and is extended to "2008-06-26T23:59:59".
     *       * Parameter "box ": Specifies the CaseManager box from which the task list is retrieved. Possible values:
     *         [OPENED|SENT|CLOSED|DELETED|HISTORICAL_RECORDS|ALL]. Default: OPENED.
     *       * Parameter "onlyMarkedTasks ": Filters the result list by returning only marked tasks. Tasks can be marked from within CaseManager
     *         or with the 'markForDownload' parameter in the createTask or updateTask operations.
     *       * Parameter "filterOnField ": Can be used to filter results that contain a specific value in a field (equality filter) or time
     *         range in a date field (time range filter).
     *       * Parameter "filterValue ": Specify the value, possibly with wildcard, that the field must have or from/to date to allow the task
     *         to be retrieved. Use only in combination with the filterOnField parameter.
     *       * Parameter "maxCount ": Restricts the size of the returning list to the specified value.
     *       * Parameter "startAtIndex ": Pagination feature, in combination with maxCount parameter. Allows to retrieve the "next" block of
     *         items. The value is 1-based (first item has index 1).
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.
     *       * Parameter "sortBy ": Specifies the field to sort the results by. The default sorting direction is descending.
     *       If not specified, 'CreationDate' will be used
     *       * Parameter "sortDirection ": Specifies the sorting direction. Possible values: 'ASC', 'DESC'.
     *       If 'sortBy' parameter is not specified, 'CreationDate' will be used as its value
     *       * Parameter "repairerCommunityId ": This parameter takes either the member id of the community or the keyword NONE.
     *       If a community Id is present, only the tasks where the repairer belongs to that community will be returned.
     *       If NONE is specified, only the tasks where the repairer do not belong to either community will be returned.
     *       The communities have to be defined on the organization or the root organization of the requesting member.   
     */
    @WebMethod
    @WebResult(name = "getTaskListResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "getTaskListResponse")
    public B2BResponse getTaskList(
        @WebParam(partName = "getTaskListRequest", name = "getTaskListRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest getTaskListRequest
    );

    /**
     * Retrieves the task specified by the taskId parameter and attempts to reopen it using the current member permissions
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to reopen. Required parameter
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "reopenTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "reopenTaskResponse")
    public B2BResponse reopenTask(
        @WebParam(partName = "reopenTaskRequest", name = "reopenTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest reopenTaskRequest
    );

    /**
     * This operation deletes the current user's task identified by taskId.
     *     
     *       * Parameter "loginId": The loginId ("username") of the AudaNet account, for authentication
     *       * Parameter "password": The password of the AudaNet account, for authentication
     *       
     *       * Parameter "taskId ": Specified the Id of the task to delete. Required parameter
     *       * Parameter "comment ": 
     *       	a short text describing the reason for the delete.
     *       
     *       * Parameter "processAsUser ": Specifies the loginId of the actual user as which the operation will be performed. Use this parameter
     *         if there is a virtual user making the B2B call on behalf of an actual user.   
     */
    @WebMethod
    @WebResult(name = "deleteTaskResponse", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com", partName = "deleteTaskResponse")
    public B2BResponse deleteTask(
        @WebParam(partName = "deleteTaskRequest", name = "deleteTaskRequest", targetNamespace = "http://serviceinterface_v1.b2b.audatex.com")
        B2BRequest deleteTaskRequest
    );
}
